{"version":3,"file":"lib.js","sourceRoot":"","sources":["../src/lib.ts"],"names":[],"mappings":"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","sourcesContent":["import parsePhoneNumber from 'libphonenumber-js';\nimport {\n  And,\n  ArrayOverlap,\n  FindOptionsOrder,\n  ILike,\n  In,\n  LessThanOrEqual,\n  MoreThanOrEqual,\n} from 'typeorm';\nimport { ReadStream } from 'fs';\nimport { GraphQLResolveInfo, SelectionNode } from 'graphql';\n\nimport { IPaginate, IPreparedImage, IPreparedImageAndOrder, QueryDataType } from './types';\nimport { AllImagesDto, ImageFileDto, TempImagesDto } from './dto';\nimport { z } from 'zod';\n\n/**\n * @description Отлов ошибки\n * @param options - Объект параметров\n * @param options.error - Объект ошибки\n * @param options.message - Сообщение ошибки\n */\nexport const getError = ({ error, message }: { error?: unknown; message?: string }): void => {\n  if (error) console.error(error);\n  if (message) console.error(message);\n};\n\n/**\n * @description Создает объект с информацией о пагинации\n * @param {number} page - Текущая страница\n * @param {number} count - Общее количество записей\n * @param {number} limit - Сколько записей на одной странице,\n * @param {number} modelsNumber - Количество участвующих таблиц\n * @return Возвращает объект пагинации\n */\nexport const createPaginate = (\n  page: number,\n  count: number,\n  limit: number,\n  modelsNumber = 1,\n): IPaginate => {\n  const pages = Math.ceil(count / (limit * modelsNumber));\n\n  const paginate: IPaginate = {\n    page,\n    pages,\n    previous: page > 1 ? page - 1 : undefined,\n    next: page <= pages - 1 ? page + 1 : undefined,\n    count,\n    limit,\n  };\n\n  return paginate;\n};\n\n/**\n * @description Превращает страницу и лимит в то, сколько пропустить записей в orm\n * @param {number} page - Текущая страница\n * @param {number} limit - Сколько записей на одной странице,\n * @return Возвращает orm skip\n */\nexport const getPaginateSkip = (page: number, limit: number): number => {\n  return (page - 1) * limit;\n};\n\n/**\n * @description Валидация номера телефона\n * @param {string} phone - Номер телефона\n * @return {string} Возвращает либо пустую строку, либо отформатированный номер телефона\n * @example\n * const phone = formatPhone(+79885054219)\n * phone === \"+79885054219\"\n */\nexport const formatPhone = (phone: string): string => {\n  const parsedPhone = parsePhoneNumber(phone);\n  if (!parsedPhone?.isValid()) return '';\n\n  return parsedPhone.number;\n};\n\n/**\n * @description Объединяет два 32 битных числа\n * @param {number} low - младшие 32 бита числа\n * @param {number} hight - старшие 32 бита числа\n * @return {number} Готовое число\n */\nexport const concatenateTwo32BitNumbers = (low: number, high: number): number => {\n  return (high >>> 0) * Math.pow(2, 32) + (low >>> 0);\n};\n\n/**\n * @description Проверяет page и limit на корректные границы\n * @param {number} page - Текущая страница\n * @param {number} limit - Сколько записей на одной странице,\n * @param {number} maxLimit - Максимально допустимое число записей\n * @return Возвращает объект с корректными значениями в допустимых пределах\n */\nexport const checkPageAndLimit = (\n  page: number,\n  limit: number,\n  maxLimit = 500,\n): {\n  checkedPage: number;\n  checkedLimit: number;\n} => {\n  const paginationData = {\n    checkedPage: page,\n    checkedLimit: limit,\n  };\n\n  if (page < 1) {\n    paginationData.checkedPage = 1;\n  }\n\n  if (limit < 1) {\n    paginationData.checkedLimit = 1;\n  }\n\n  if (limit > maxLimit) {\n    paginationData.checkedLimit = maxLimit;\n  }\n\n  return paginationData;\n};\n\n/**\n * @description Конвертация FileStream от multer в Buffer\n * @param fileStream - Объект FileStream\n */\nexport const fileStreamToBuffer = async (fileStream: ReadStream): Promise<Buffer> => {\n  const chunks: Uint8Array[] = [];\n\n  for await (const chunk of fileStream) {\n    chunks.push(chunk as Uint8Array);\n  }\n\n  return Buffer.concat(chunks);\n};\n\n/**\n * @description Создает queryData из параметров пагинации, сортирвоки и фильтрации\n * @param {object} options - Объект с параметрами\n * @param {number} options.page - Текущая страница\n * @param {number} options.limit - Сколько записей на одной странице,\n * @param {string} options.sortField - Название поля, по которому будет сортировка\n * @param {string} options.sortOrder - asc или desc\n * @param {string} options.filterType - and или or\n * @param {object} options.filter - Объект с полями для фильтрации внутри where\n * @param {object} options.search - Объект с полями для поиска внутри where\n * @param {object} options.fromToFields - Объект с полями для поиска from to\n * @return Возвращает объект с query data для запроса в orm\n */\nexport const createQueryData = <Entity>({\n  page,\n  limit,\n  sortField,\n  sortOrder,\n  filterType,\n  filter,\n  search,\n  fromToFields,\n  oneEntryArrayFields,\n}: {\n  page: number;\n  limit: number;\n  sortField: string;\n  sortOrder: string;\n  filterType: string;\n  filter?: object;\n  search?: object;\n  fromToFields?: {\n    fromFieldName: string;\n    toFieldName: string;\n    originalFieldName: string;\n  }[];\n  oneEntryArrayFields?: {\n    key: string;\n    originalKey: string;\n  }[];\n}): QueryDataType<Entity> => {\n  const queryData = {\n    skip: getPaginateSkip(page, limit),\n    take: limit,\n  } as QueryDataType<Entity>;\n\n  if (sortField && sortOrder) {\n    queryData.order = {\n      [sortField]: sortOrder,\n    } as FindOptionsOrder<Entity>;\n  }\n\n  if (filter) {\n    let whereAnd = {};\n    let whereOr: object[] = [];\n\n    const fromToMap = new Map<\n      string,\n      {\n        fromFieldName: string;\n        fromFieldValue: unknown;\n        toFieldName: string;\n        toFieldValue: unknown;\n      }\n    >();\n\n    for (const [key, value] of Object.entries(filter)) {\n      let currentKey = key;\n      let currentValue;\n\n      if (\n        typeof value === 'object' &&\n        !Array.isArray(value) &&\n        typeof value?.getTime !== 'function'\n      ) {\n        const obj = JSON.parse(JSON.stringify(value)) as object;\n        const valueObject = {} as {\n          [key: string]: unknown;\n        };\n\n        for (const [key, value] of Object.entries(obj)) {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n          valueObject[key] = typeof value === 'boolean' ? value : In(value);\n        }\n\n        currentValue = valueObject;\n      } else if (typeof value === 'boolean') {\n        currentValue = value;\n      } else {\n        if (fromToFields) {\n          fromToFields.find((item) => {\n            let fromKey = '';\n            let toKey = '';\n\n            if (item.fromFieldName === key) fromKey = key;\n            else if (item.toFieldName === key) toKey = key;\n\n            if (!fromKey || !toKey) return false;\n\n            const mapValue = fromToMap.get(item.originalFieldName);\n\n            if (mapValue) {\n              fromToMap.set(item.originalFieldName, {\n                fromFieldName: mapValue.fromFieldName ? mapValue.fromFieldName : fromKey,\n                fromFieldValue: mapValue.fromFieldValue\n                  ? mapValue.fromFieldValue\n                  : fromKey\n                    ? value\n                    : null,\n                toFieldName: mapValue.toFieldName ? mapValue.toFieldName : toKey,\n                toFieldValue: mapValue.toFieldValue ? mapValue.toFieldValue : toKey ? value : null,\n              });\n              return true;\n            }\n\n            fromToMap.set(item.originalFieldName, {\n              fromFieldName: fromKey,\n              fromFieldValue: fromKey ? value : null,\n              toFieldName: toKey,\n              toFieldValue: toKey ? value : null,\n            });\n\n            return true;\n          });\n        }\n\n        if (Array.isArray(value) && value.length && oneEntryArrayFields) {\n          // @NOTE тут перечисляются поля, которые массивы в базе данных и надо найти хотя бы одно вхождение.\n          const finded = oneEntryArrayFields.find((item) => item.key === key);\n\n          if (finded) {\n            currentValue = ArrayOverlap(value);\n            currentKey = finded.originalKey;\n          } else {\n            currentValue = In(value);\n          }\n        } else if (Array.isArray(value)) {\n          currentValue = In(value);\n        }\n      }\n\n      if (currentValue) {\n        whereAnd = {\n          ...whereAnd,\n          [currentKey]: currentValue,\n        };\n\n        whereOr = [\n          ...whereOr,\n          {\n            [currentKey]: currentValue,\n          },\n        ];\n      }\n    }\n\n    fromToMap.forEach((item, key) => {\n      if (item.fromFieldValue && item.toFieldValue) {\n        whereAnd = {\n          ...whereAnd,\n          [key]: And(MoreThanOrEqual(item.fromFieldValue), LessThanOrEqual(item.toFieldValue)),\n        };\n        whereOr = [\n          ...whereOr,\n          { [key]: And(MoreThanOrEqual(item.fromFieldValue), LessThanOrEqual(item.toFieldValue)) },\n        ];\n      } else if (item.fromFieldValue) {\n        whereAnd = {\n          ...whereAnd,\n          [key]: MoreThanOrEqual(item.fromFieldValue),\n        };\n        whereOr = [...whereOr, { [key]: MoreThanOrEqual(item.fromFieldValue) }];\n      } else if (item.toFieldValue) {\n        whereAnd = {\n          ...whereAnd,\n          [key]: LessThanOrEqual(item.toFieldValue),\n        };\n        whereOr = [...whereOr, { [key]: LessThanOrEqual(item.toFieldValue) }];\n      }\n    });\n\n    if (filterType === 'and') queryData.where = whereAnd;\n    else if (filterType === 'or') queryData.where = whereOr;\n  }\n\n  if (search) {\n    let searchWhere = {};\n\n    for (const [key, value] of Object.entries(search)) {\n      searchWhere = {\n        ...searchWhere,\n        [key]: ILike(`%${value}%`),\n      };\n    }\n\n    if (!queryData.where) queryData.where = searchWhere;\n    if (Array.isArray(queryData.where)) queryData.where = [...queryData.where, searchWhere];\n    else queryData.where = { ...searchWhere, ...queryData.where };\n  }\n\n  return queryData;\n};\n\n/**\n * @description Получить список запрашиваемых полей\n * @param info - Объект с информацией запроса\n */\nexport const extractGraphqlFields = (info: GraphQLResolveInfo): string[] => {\n  const processSelections = (\n    selections: readonly SelectionNode[],\n    parentPath: string = '',\n  ): string[] => {\n    const fields: string[] = [];\n\n    selections.forEach((selection) => {\n      if (selection.kind === 'Field') {\n        const fieldName = selection.name.value;\n        const currentPath = parentPath ? `${parentPath}.${fieldName}` : fieldName;\n\n        fields.push(currentPath);\n\n        if (selection.selectionSet) {\n          fields.push(...processSelections(selection.selectionSet.selections, currentPath));\n        }\n      }\n    });\n\n    return fields;\n  };\n\n  const rootSelections = info.fieldNodes[0].selectionSet?.selections;\n  if (!rootSelections) {\n    return [];\n  }\n\n  return processSelections(rootSelections);\n};\n\n/**\n * @description Связывает файлы из микросервиса с полями alt и sourceUrl\n * @param {FilesDto[]} files - файлы от микросервиса\n * @param {TempImagesDto[]} tempImages - исходный массив, на основе которого делался запрос\n * @return {IPreparedImage[]} Взвращает объект с информацией о файлах\n */\nexport const prepareTempImages = (\n  files: ImageFileDto[],\n  tempImages: TempImagesDto[],\n): IPreparedImage[] => {\n  const images = files\n    .map((item) => {\n      const {\n        imageName,\n        originalFileExtension,\n        fileExtensions,\n        prefixes,\n        entityId,\n        fullPathExample,\n      } = item;\n\n      const finded = tempImages.find(\n        (tempImage) => tempImage.tempName === `${imageName}.${originalFileExtension}`,\n      );\n\n      if (!finded) return null;\n\n      return {\n        name: imageName,\n        fileExtensions,\n        prefixes,\n        originalFileExtension,\n        entityId,\n        fullPathExample,\n        altRU: finded.altRU,\n        altEN: finded.altEN,\n        altAR: finded.altAR,\n      };\n    })\n    .filter((item) => item !== null) as IPreparedImage[];\n\n  return images;\n};\n\n/**\n * @description Достает tempImages и массива со всеми картинками объекта\n * @param {AllImagesDto[]} allImages - массив всех изображений\n * @return {TempImagesDto[]} Взвращает объект с информацией о файлах\n */\nexport const getTempImagesInAllImages = (\n  allImages: AllImagesDto[] | undefined,\n): TempImagesDto[] => {\n  if (!allImages) return [];\n\n  const tempImages = allImages\n    .map((item) => {\n      if (!item.tempName) return null;\n\n      return {\n        tempName: item.tempName,\n        altRU: item.altRU,\n        altEN: item.altEN,\n        altAR: item.altAR,\n      };\n    })\n    .filter((item) => item !== null) as TempImagesDto[];\n\n  return tempImages;\n};\n\n/**\n * @description Обновляет изображения в сущности\n * @param {string} entityImages - текущие изображения\n * @param {AllImagesDto[]} allImages - изображения что пришли от клиента\n * @param {IPreparedImage[]} preparedTempImages - заранее подготовленные новые изображения\n * @return {object} Взвращает объект с информацией о новых файлах и удаленных\n */\nexport const updateEntityImages = (\n  entityImages: string | null,\n  allImages: AllImagesDto[] | undefined,\n  preparedTempImages: IPreparedImage[],\n): {\n  newImages: IPreparedImage[] | null;\n  deletedImages: ImageFileDto[] | null;\n} => {\n  if ((!entityImages && !preparedTempImages.length) || !allImages) {\n    return {\n      newImages: null,\n      deletedImages: null,\n    };\n  }\n\n  let correctedImages: IPreparedImageAndOrder[] = [];\n  const deletedImages: ImageFileDto[] = [];\n\n  const allImagesAndOrders = allImages.map((item, index) => {\n    return {\n      ...item,\n      order: index,\n    };\n  });\n\n  if (entityImages) {\n    const images = JSON.parse(entityImages) as IPreparedImage[];\n    const schema = z.object({\n      name: z.string(),\n      fileExtensions: z.string().array(),\n      prefixes: z.string().array(),\n      originalFileExtension: z.string(),\n      altRU: z.string().optional().nullable(),\n      altEN: z.string().optional().nullable(),\n      altAR: z.string().optional().nullable(),\n    });\n\n    if (!Array.isArray(images)) {\n      return {\n        newImages: null,\n        deletedImages: null,\n      };\n    }\n\n    correctedImages = images\n      .map((item) => {\n        try {\n          schema.parse(item);\n        } catch {\n          return null;\n        }\n\n        const finded = allImagesAndOrders.find((element) => element.name === item.name);\n\n        if (!finded) {\n          deletedImages.push({\n            imageName: item.name,\n            fileExtensions: item.fileExtensions,\n            prefixes: item.prefixes,\n            entityId: item.entityId,\n            fullPathExample: item.fullPathExample,\n            originalFileExtension: item.originalFileExtension,\n          });\n          return null;\n        }\n\n        return {\n          name: item.name,\n          fileExtensions: item.fileExtensions,\n          prefixes: item.prefixes,\n          originalFileExtension: item.originalFileExtension,\n          entityId: item.entityId,\n          fullPathExample: item.fullPathExample,\n          altRU: finded.altRU,\n          altEN: finded.altEN,\n          altAR: finded.altAR,\n          order: finded.order,\n        };\n      })\n      .filter((item) => item !== null) as IPreparedImageAndOrder[];\n  }\n\n  const preparedTempImagesAndOrder = preparedTempImages\n    .map((item) => {\n      const finded = allImagesAndOrders.find(\n        (element) => element.tempName === `${item.name}.${item.originalFileExtension}`,\n      );\n\n      if (!finded) return null;\n\n      return {\n        ...item,\n        order: finded.order,\n      };\n    })\n    .filter((item) => item !== null) as IPreparedImageAndOrder[];\n\n  const newImages = [...correctedImages, ...preparedTempImagesAndOrder]\n    .sort((a, b) => a.order - b.order)\n    .map((item) => {\n      return {\n        name: item.name,\n        fileExtensions: item.fileExtensions,\n        prefixes: item.prefixes,\n        originalFileExtension: item.originalFileExtension,\n        entityId: item.entityId,\n        fullPathExample: item.fullPathExample,\n        altRU: item.altRU,\n        altEN: item.altEN,\n        altAR: item.altAR,\n      };\n    });\n\n  return {\n    newImages: newImages.length ? newImages : null,\n    deletedImages: deletedImages.length ? deletedImages : null,\n  };\n};\n\n/**\n * @description Конвертация текста с русского в транслит\n * @param {string} word - Строка\n * @param {boolean} isTrim - Убирать ли тире в начале и конце\n * @return {string} Возвращает строку в транслите\n */\nexport const translit = (word: string, isTrim = true): string => {\n  const converter = {\n    а: 'a',\n    б: 'b',\n    в: 'v',\n    г: 'g',\n    д: 'd',\n    е: 'e',\n    ё: 'e',\n    ж: 'zh',\n    з: 'z',\n    и: 'i',\n    й: 'y',\n    к: 'k',\n    л: 'l',\n    м: 'm',\n    н: 'n',\n    о: 'o',\n    п: 'p',\n    р: 'r',\n    с: 's',\n    т: 't',\n    у: 'u',\n    ф: 'f',\n    х: 'h',\n    ц: 'c',\n    ч: 'ch',\n    ш: 'sh',\n    щ: 'sch',\n    ь: '',\n    ы: 'y',\n    ъ: '',\n    э: 'e',\n    ю: 'yu',\n    я: 'ya',\n  };\n\n  word = word.toLowerCase();\n\n  let answer = '';\n  for (let i = 0; i < word.length; ++i) {\n    if (converter[word[i] as keyof typeof converter] == undefined) {\n      answer += word[i];\n    } else {\n      answer += converter[word[i] as keyof typeof converter];\n    }\n  }\n\n  answer = answer.replace(/[^-0-9a-z]/g, '-');\n  answer = answer.replace(/[-]+/g, '-');\n  if (isTrim) answer = answer.replace(/^\\\\-|-$/g, '');\n\n  return answer;\n};\n\n/**\n * @description Проверка валидности ЧПУ строки\n * @param {string} string - Строка\n * @return {boolean} Возвращает true/false\n */\nexport const checkTranslit = (string: string): boolean => {\n  const cpuRegex = /^[a-z0-9]+(-[a-z0-9]+)*$/;\n  return cpuRegex.test(string);\n};\n"]}