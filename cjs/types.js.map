{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":";;;AAyDA,IAAY,oBAKX;AALD,WAAY,oBAAoB;IAC9B,iDAA2B,CAAA;IAC3B,iDAA2B,CAAA;IAC3B,+CAAyB,CAAA;IACzB,6EAAuD,CAAA;AACzD,CAAC,EALW,oBAAoB,oCAApB,oBAAoB,QAK/B","sourcesContent":["import { FindOptionsOrder, FindOptionsWhere } from 'typeorm';\n\nexport interface IResponse<StatusCode, Data = object> {\n  statusCode: StatusCode;\n  messages?: string[];\n  message?: string;\n  error?: string;\n  data?: Data;\n}\nexport interface IPaginate {\n  page: number;\n  pages: number;\n  previous?: number;\n  next?: number;\n  count: number;\n  limit: number;\n}\n\nexport type QueryDataType<Entity> = {\n  skip: number;\n  take: number;\n  order?: FindOptionsOrder<Entity>;\n  where?: FindOptionsWhere<Entity>[] | FindOptionsWhere<Entity>;\n};\n\nexport type OkNotFoundType = IResponse<404 | 200>;\nexport type OkNotFoundBadRequestType = IResponse<404 | 400 | 200>;\nexport type OkNotFoundForbiddenType = IResponse<404 | 403 | 200>;\n\nexport type FilterType = 'and' | 'or';\nexport type SortOrderType = 'asc' | 'desc' | 'ASC' | 'DESC';\n\nexport interface IPreparedImage {\n  name: string;\n  fileExtensions: string[];\n  originalFileExtension: string;\n  entityId: string;\n  fullPathExample: string;\n  altRU?: string;\n  altEN?: string;\n  altAR?: string;\n}\n\nexport interface IPreparedImageAndOrder extends IPreparedImage {\n  order: number;\n}\n\nexport interface IGetQuery {\n  page?: number;\n  limit?: number;\n  sortField?: string;\n  sortOrder?: SortOrderType;\n  filterType?: FilterType;\n  filter?: object;\n  search?: object;\n}\n\nexport enum ImageContentTypeEnum {\n  'image/webp' = 'image/webp',\n  'image/jpeg' = 'image/jpeg',\n  'image/png' = 'image/png',\n  'application/octet-stream' = 'application/octet-stream',\n}\n"]}