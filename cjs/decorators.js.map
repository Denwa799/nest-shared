{"version":3,"file":"decorators.js","sourceRoot":"","sources":["../src/decorators.ts"],"names":[],"mappings":";;;AAAA,2CAAiD;AACjD,6CAAoD;AACpD,6CAAyF;AACzF,qDAiByB;AAElB,MAAM,WAAW,GAAG,CAAC,EAC1B,IAAI,EACJ,UAAU,EACV,GAAG,EACH,GAAG,EACH,OAAO,EACP,WAAW,EACX,UAAU,GAAG,KAAK,EAClB,MAAM,GAAG,KAAK,EACd,OAAO,GAAG,KAAK,EACf,MAAM,GAAG,KAAK,EACd,KAAK,GAAG,KAAK,EACb,UAAU,GAAG,KAAK,EAClB,UAAU,GAAG,KAAK,GAgBnB,EAIU,EAAE;IACX,MAAM,UAAU,GAAG,EAAE,CAAC;IAEtB,IAAI,UAAU,EAAE,CAAC;QACf,UAAU,CAAC,IAAI,CACb,IAAA,6BAAmB,EAAC;YAClB,OAAO;YACP,WAAW;SACZ,CAAC,CACH,CAAC;IACJ,CAAC;SAAM,CAAC;QACN,UAAU,CAAC,IAAI,CAAC,IAAA,qBAAkB,EAAC,EAAE,OAAO,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC;IAChE,CAAC;IAED,QAAQ,IAAI,EAAE,CAAC;QACb,KAAK,KAAK;YACR,UAAU,CAAC,IAAI,CAAC,IAAA,eAAK,EAAC,GAAG,EAAE,CAAC,aAAG,EAAE,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;YAE5D,IAAI,UAAU;gBAAE,UAAU,CAAC,IAAI,CAAC,IAAA,4BAAU,GAAE,CAAC,CAAC;YAC9C,IAAI,OAAO;gBAAE,UAAU,CAAC,IAAI,CAAC,IAAA,yBAAO,GAAE,CAAC,CAAC;YAExC,UAAU,CAAC,IAAI,CAAC,IAAA,0BAAQ,GAAE,CAAC,CAAC;YAE5B,IAAI,GAAG;gBAAE,UAAU,CAAC,IAAI,CAAC,IAAA,qBAAG,EAAC,GAAG,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;YACtD,IAAI,GAAG;gBAAE,UAAU,CAAC,IAAI,CAAC,IAAA,qBAAG,EAAC,GAAG,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;YAEtD,MAAM;QACR,KAAK,OAAO;YACV,UAAU,CAAC,IAAI,CAAC,IAAA,eAAK,EAAC,GAAG,EAAE,CAAC,eAAK,EAAE,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;YAE9D,IAAI,UAAU;gBAAE,UAAU,CAAC,IAAI,CAAC,IAAA,4BAAU,GAAE,CAAC,CAAC;YAC9C,IAAI,OAAO;gBAAE,UAAU,CAAC,IAAI,CAAC,IAAA,yBAAO,GAAE,CAAC,CAAC;YAExC,UAAU,CAAC,IAAI,CAAC,IAAA,0BAAQ,GAAE,CAAC,CAAC;YAE5B,IAAI,GAAG;gBAAE,UAAU,CAAC,IAAI,CAAC,IAAA,qBAAG,EAAC,GAAG,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;YACtD,IAAI,GAAG;gBAAE,UAAU,CAAC,IAAI,CAAC,IAAA,qBAAG,EAAC,GAAG,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;YAEtD,MAAM;QACR,KAAK,MAAM;YACT,UAAU,CAAC,IAAI,CAAC,IAAA,eAAK,EAAC,GAAG,EAAE,CAAC,IAAI,EAAE,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;YAE7D,IAAI,UAAU;gBAAE,UAAU,CAAC,IAAI,CAAC,IAAA,4BAAU,GAAE,CAAC,CAAC;YAC9C,IAAI,OAAO;gBAAE,UAAU,CAAC,IAAI,CAAC,IAAA,yBAAO,GAAE,CAAC,CAAC;YAExC,UAAU,CAAC,IAAI,CAAC,IAAA,wBAAM,EAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;YAC3C,MAAM;QACR,KAAK,SAAS;YACZ,UAAU,CAAC,IAAI,CAAC,IAAA,eAAK,EAAC,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;YACjD,IAAI,UAAU;gBAAE,UAAU,CAAC,IAAI,CAAC,IAAA,4BAAU,GAAE,CAAC,CAAC;YAC9C,UAAU,CAAC,IAAI,CAAC,IAAA,2BAAS,GAAE,CAAC,CAAC;YAC7B,MAAM;QACR,KAAK,QAAQ,CAAC;QACd;YACE,UAAU,CAAC,IAAI,CAAC,IAAA,eAAK,EAAC,GAAG,EAAE,CAAC,MAAM,EAAE,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;YAE/D,IAAI,UAAU;gBAAE,UAAU,CAAC,IAAI,CAAC,IAAA,4BAAU,GAAE,CAAC,CAAC;YAC9C,IAAI,OAAO;gBAAE,UAAU,CAAC,IAAI,CAAC,IAAA,yBAAO,GAAE,CAAC,CAAC;YAExC,UAAU,CAAC,IAAI,CAAC,IAAA,0BAAQ,EAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;YAE7C,IAAI,MAAM;gBAAE,UAAU,CAAC,IAAI,CAAC,IAAA,wBAAM,GAAE,CAAC,CAAC;YACtC,IAAI,UAAU;gBAAE,UAAU,CAAC,IAAI,CAAC,IAAA,4BAAU,GAAE,CAAC,CAAC;YAC9C,IAAI,UAAU;gBAAE,UAAU,CAAC,IAAI,CAAC,IAAA,4BAAU,GAAE,CAAC,CAAC;YAC9C,IAAI,GAAG;gBAAE,UAAU,CAAC,IAAI,CAAC,IAAA,2BAAS,EAAC,GAAG,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;YAC5D,IAAI,GAAG;gBAAE,UAAU,CAAC,IAAI,CAAC,IAAA,2BAAS,EAAC,GAAG,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;YAC5D,IAAI,UAAU;gBAAE,UAAU,CAAC,IAAI,CAAC,IAAA,wBAAM,EAAC,UAAU,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;YACvE,IAAI,MAAM;gBAAE,UAAU,CAAC,IAAI,CAAC,IAAA,wBAAM,GAAE,CAAC,CAAC;YACtC,IAAI,KAAK;gBAAE,UAAU,CAAC,IAAI,CAAC,IAAA,uBAAK,GAAE,CAAC,CAAC;IACxC,CAAC;IAED,OAAO,IAAA,wBAAe,EAAC,GAAG,UAAU,CAAC,CAAC;AACxC,CAAC,CAAC;AAzGW,QAAA,WAAW,eAyGtB","sourcesContent":["import { applyDecorators } from '@nestjs/common';\nimport { Field, Float, Int } from '@nestjs/graphql';\nimport { ApiProperty as SwaggerApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsArray,\n  IsBoolean,\n  IsDate,\n  IsEnum,\n  IsJSON,\n  IsNegative,\n  IsNumber,\n  IsOptional,\n  IsPositive,\n  IsString,\n  IsUrl,\n  IsUUID,\n  Max,\n  MaxLength,\n  Min,\n  MinLength,\n} from 'class-validator';\n\nexport const ApiProperty = ({\n  type,\n  enumObject,\n  min,\n  max,\n  example,\n  description,\n  isOptional = false,\n  isUUID = false,\n  isArray = false,\n  isJson = false,\n  isUrl = false,\n  isPositive = false,\n  isNegative = false,\n}: {\n  type: 'string' | 'int' | 'float' | 'date' | 'boolean';\n  enumObject?: object;\n  min?: number;\n  max?: number;\n  example?: string;\n  description?: string;\n  isOptional?: boolean;\n  isUUID?: boolean;\n  isArray?: boolean;\n  isJson?: boolean;\n  isUrl?: boolean;\n  isPositive?: boolean;\n  isNegative?: boolean;\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n}): (<TFunction extends Function, Y>(\n  target: TFunction | object,\n  propertyKey?: string | symbol,\n  descriptor?: TypedPropertyDescriptor<Y>,\n) => void) => {\n  const decorators = [];\n\n  if (isOptional) {\n    decorators.push(\n      ApiPropertyOptional({\n        example,\n        description,\n      }),\n    );\n  } else {\n    decorators.push(SwaggerApiProperty({ example, description }));\n  }\n\n  switch (type) {\n    case 'int':\n      decorators.push(Field(() => Int, { nullable: isOptional }));\n\n      if (isOptional) decorators.push(IsOptional());\n      if (isArray) decorators.push(IsArray());\n\n      decorators.push(IsNumber());\n\n      if (min) decorators.push(Min(min, { each: isArray }));\n      if (max) decorators.push(Max(max, { each: isArray }));\n\n      break;\n    case 'float':\n      decorators.push(Field(() => Float, { nullable: isOptional }));\n\n      if (isOptional) decorators.push(IsOptional());\n      if (isArray) decorators.push(IsArray());\n\n      decorators.push(IsNumber());\n\n      if (min) decorators.push(Min(min, { each: isArray }));\n      if (max) decorators.push(Max(max, { each: isArray }));\n\n      break;\n    case 'date':\n      decorators.push(Field(() => Date, { nullable: isOptional }));\n\n      if (isOptional) decorators.push(IsOptional());\n      if (isArray) decorators.push(IsArray());\n\n      decorators.push(IsDate({ each: isArray }));\n      break;\n    case 'boolean':\n      decorators.push(Field({ nullable: isOptional }));\n      if (isOptional) decorators.push(IsOptional());\n      decorators.push(IsBoolean());\n      break;\n    case 'string':\n    default:\n      decorators.push(Field(() => String, { nullable: isOptional }));\n\n      if (isOptional) decorators.push(IsOptional());\n      if (isArray) decorators.push(IsArray());\n\n      decorators.push(IsString({ each: isArray }));\n\n      if (isUUID) decorators.push(IsUUID());\n      if (isPositive) decorators.push(IsPositive());\n      if (isNegative) decorators.push(IsNegative());\n      if (min) decorators.push(MinLength(min, { each: isArray }));\n      if (max) decorators.push(MaxLength(max, { each: isArray }));\n      if (enumObject) decorators.push(IsEnum(enumObject, { each: isArray }));\n      if (isJson) decorators.push(IsJSON());\n      if (isUrl) decorators.push(IsUrl());\n  }\n\n  return applyDecorators(...decorators);\n};\n"]}